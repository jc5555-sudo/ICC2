################################################################################
#Objective: 

#To implement, verify the Power Delivery Network (PDN) by creating PG meshes, rings, standard cells rails and additional straps, and ensure connectivity and DRC compliance.

################################################################################
#Part 1  - Initialize, Cleanup and Power Net Setup
################################################################################ 
# Load floorplan
# Remove any existing PG strategies, patterns:
remove_pg_strategies -all
remove_pg_patterns -all
remove_pg_regions -all
remove_pg_via_master_rules -all
remove_pg_strategy_via_rules -all
remove_routes -net_types {power ground} -ring -stripe -macro_pin_connect -lib_cell_pin_connect

# Connect logical nets to PG
connect_pg_net

# Define via master rule
set_pg_via_master_rule pgvia_8x10 -via_array_dimension {8 10}

################################################################################
# Part 2 - Macro Prep 
################################################################################
# Collect all hard macros
set all_macros [get_cells -hierarchical -filter "is_hard_macro && !is_physical_only"]
set hm(risc_core) [get_cells -filter "is_hard_macro==true" -physical_context REG_FILE__RAM*]
set hm(top) [remove_from_collection $all_macros $hm(risc_core)]

#Apply keepout margins
create_keepout_margin -outer {3 3 3 3} $all_macros

################################################################################
#Part 3 - Mesh Creation, Strategies and Compilation 
################################################################################
# Mesh Creation: Create top-level mesh (M7/M8), fine mesh (M2) for std cell rails
# width m7/m8: pitch=1.216, min_spacing=0.056, min_width=0.056; m7: 2*1.216 - 4*0.056
create_pg_mesh_pattern P_top_two \
        -layers { \
                { {horizontal_layer: M7} {width: 1.104} {spacing: interleaving} {pitch: 13.376} {offset: 0.856} {trim : true} } \
                { {vertical_layer: M8}   {width: 4.64 } {spacing: interleaving} {pitch: 19.456} {offset: 6.08}  {trim : true} } \
                } \
        -via_rule { {intersection: adjacent} {via_master : pgvia_8x10} }

# m2 pitch=0.152; 0.152*48=7.296
create_pg_mesh_pattern P_m2_triple \
        -layers { \
                { {vertical_layer: M2}  {track_alignment : track} {width: 0.44 0.192 0.192} {spacing: 2.724 3.456} {pitch: 9.728} {offset: 1.216} {trim : true} } \
                }
# Mesh Strategies: Apply top level M7/M8 mesh (VDD, VSS, VDDH), M2 mesh strategies
#==> top mesh - M7/M8
set_pg_strategy S_default_vddvss \
        -core \
        -pattern   { {name: P_top_two} {nets:{VSS VDD}} {offset_start: {20 20}} } \
        -blockage  { {{nets: VDD} {voltage_areas: PD_RISC_CORE}} } \
        -extension { {{stop:design_boundary_and_generate_pin}} }

set_pg_strategy S_va_vddh \
        -voltage_areas PD_RISC_CORE \
        -pattern   { {name: P_top_two} {nets: {- VDDH}} {offset_start: {20 20}} } \
        -extension { {{direction:TR} {stop:design_boundary_and_generate_pin}} }

#==> low mesh - M2
set_pg_strategy S_m2_vddvss \
        -core \
        -pattern   { {name: P_m2_triple} {nets: {VDD VSS VSS}} {offset_start: {20 0}} } \
        -blockage  { {{nets: VDD} {voltage_areas: PD_RISC_CORE}} {macros_with_keepout: $all_macros} } \
        -extension { {{direction:BT} {stop:design_boundary_and_generate_pin}} }
set_pg_strategy S_m2_vddh \
        -voltage_areas PD_RISC_CORE \
        -pattern   { {name: P_m2_triple} {nets: {VDDH - -}} {offset_start: {20 0}} } \
       -                                                                                                                     65,1-8        31% 1Htension { {{direction:T} {stop:design_boundary_and_generate_pin}} }

set_pg_strategy_via_rule S_via_m2_m7 \
        -via_rule { \
                {  {{strategies: {S_m2_vddvss S_m2_vddh}}      {layers: { M2 }} {nets: {VDDH VDD}} } \
                {  {{strategies: {S_m2_vddvss S_m2_vddh}}      {layers: { M2 }} {nets: {VSS}} } \
                   {{strategies: {S_default_vddvss S_va_vddh}} {layers: { M7 }} } \
                        {via_master: {default}} } \
        }

# You can use the -ignore_drc switch to speed things up a little. Not an issue in this lab though!
compile_pg -strategies {S_va_vddh S_m2_vddh}
compile_pg -strategies {S_default_vddvss S_m2_vddvss} -via_rule {S_via_m2_m7}

################################################################################
#Part 4 - PG Completion
################################################################################
# Connect rings, connect macro pins to rings
# Suppress noisy message if present
suppress_message PGR-599

# Macro rings (M5 horizontal / M6 vertical)
create_pg_ring_pattern P_HM_ring -horizontal_layer M5 -horizontal_width {1} -vertical_layer M6 -vertical_width {1} -corner_bridge false
set_pg_strategy S_HM_ring_top  -macros $hm(top)       -pattern { {pattern: P_HM_ring} {nets: {VSS VDD}}  {offset: {0.3 0.3}} }
set_pg_strategy S_HM_ring_risc -macros $hm(risc_core) -pattern { {pattern: P_HM_ring} {nets: {VSS VDDH}} {offset: {0.3 0.3}} }

# Via rules for rings (prefer existing straps when possible)
set_pg_strategy_via_rule S_ring_vias -via_rule { \
        {{{strategies: {S_HM_ring_top S_HM_ring_risc}} {layers: {M5}}} {existing: {strap }}{via_master: {default}}} \
        {{{strategies: {S_HM_ring_top S_HM_ring_risc}} {layers: {M6}}} {existing: {strap }}{via_master: {default}}} \
}

# Compile rings 
compile_pg -strategies {S_HM_ring_top S_HM_ring_risc} -via_rule S_ring_vias

# Macro pin connection pattern (scattered pins on M4/M5)
create_pg_macro_conn_pattern P_HM_pin -pin_conn_type scattered_pin -layers {M5 M4}
set_pg_strategy S_HM_top_pins -macros $hm(top) -pattern { {pattern: P_HM_pin} {nets: {VSS VDD}} }
set_pg_strategy S_HM_risc_pins -macros $hm(risc_core) -pattern { {pattern: P_HM_pin} {nets: {VSS VDDH}} }

# Compile macro pin connections
compile_pg -strategies {S_HM_top_pins S_HM_risc_pins}

# Build the standard cell rails (pattern, strategies)
create_pg_std_cell_conn_pattern P_std_cell_rail

set_pg_strategy S_std_cell_rail_VSS_VDD \
        -core \
        -blockage  { {{nets: VDD} {voltage_areas: PD_RISC_CORE}} {macros_with_keepout: $all_macros} } \
        -pattern {{pattern: P_std_cell_rail}{nets: {VSS VDD}}} \
        -extension {{stop: outermost_ring}{direction: L B R T }}

set_pg_strategy S_std_cell_rail_VDDH \
        -voltage_areas PD_RISC_CORE \
        -blockage  {macros_with_keepout: $all_macros} \
        -pattern {{pattern: P_std_cell_rail}{nets: {VDDH}}}


set_pg_strategy_via_rule S_via_stdcellrail \
        -via_rule {{intersection: adjacent}{via_master: default}}

# Compile std cell rails
compile_pg -strategies {S_std_cell_rail_VSS_VDD S_std_cell_rail_VDDH} -via_rule {S_via_stdcellrail}

# Optional: check for missing vias and connectivity early
check_pg_missing_vias

###############################################################################
# Channel straps (special pattern) - fills wide channels with vertical straps
###############################################################################
create_pg_special_pattern pt1 -insert_channel_straps { \
      {layer: M4} {direction: vertical} {width: 0.2}
      {channel_between_objects: macro} {channel_threshold: 5} }

# Optional: adding 2 strategies (assign pattern to nets)
set_pg_strategy st1 \
-core \
-blockage { {{nets: VDD} {voltage_areas: PD_RISC_CORE}} } \
-pattern {{name: pt1} {nets: VDD VSS}}

set_pg_strategy st2 \
-voltage_areas PD_RISC_CORE \
-pattern {{name: pt1} {nets: VDDH}}

# Compile channel straps (tagged for later identification if needed)
compile_pg -strategies {st1 st2} -tag channel_straps

###############################################################################
# Part 5 - Final Verification / Signoff checks
###############################################################################
# DRC and connectivity checks
check_pg_missing_vias
check_pg_drc -ignore_std_cells
check_pg_connectivity -check_std_cell_pins none


# End of script
return
